@inject UserSessionService UserSession
<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>EventEase - Event Management</title>
        <script src="https://cdn.tailwindcss.com"></script>
        <style>
            .gradient-bg {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            }
            .form-input:focus {
                box-shadow: 0 0 0 3px rgba(118, 75, 162, 0.2);
            }
            .error-message {
                color: #ef4444;
                font-size: 0.875rem;
                margin-top: 0.25rem;
            }
            .success-message {
                color: #10b981;
                font-size: 0.875rem;
                margin-top: 0.25rem;
            }
        </style>
    </head>
    <body class="min-h-screen bg-gray-100">
        <header class="gradient-bg text-white shadow-lg">
            <div class="container mx-auto px-4 py-6 flex justify-between items-center">
                <div class="flex items-center space-x-2">
                    <img src="https://placehold.co/40x40" alt="EventEase logo - Modern calendar icon in white with purple gradient background" class="rounded-full">
                    <h1 class="text-2xl font-bold">EventEase</h1>
                </div>
                <div id="user-info" class="hidden">
                    <span class="font-medium">Welcome, </span>
                    <span id="username-display" class="font-bold"></span>
                    <button id="logout-btn" class="ml-4 px-3 py-1 bg-white text-purple-800 rounded hover:bg-gray-100 transition">Logout</button>
                </div>
            </div>
        </header>

        <main class="container mx-auto px-4 py-8">
            <!-- Registration Section -->
            <section id="registration-section" class="max-w-md mx-auto bg-white rounded-lg shadow-md p-6 mb-8">
                <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">Event Registration</h2>
                <img src="https://placehold.co/600x300" alt="People attending a conference event with smiling faces and networking" class="w-full h-auto rounded-lg mb-6">
                
                <form id="registration-form" class="space-y-4">
                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-700">Full Name</label>
                        <input type="text" id="name" name="name" required 
                            class="mt-1 block w-full form-input rounded-md border-gray-300 shadow-sm">
                        <div id="name-error" class="error-message"></div>
                    </div>
                    
                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                        <input type="email" id="email" name="email" required 
                            class="mt-1 block w-full form-input rounded-md border-gray-300 shadow-sm">
                        <div id="email-error" class="error-message"></div>
                    </div>
                    
                    <div>
                        <label for="event" class="block text-sm font-medium text-gray-700">Select Event</label>
                        <select id="event" name="event" class="mt-1 block w-full form-input rounded-md border-gray-300 shadow-sm">
                            <option value="conference">Annual Tech Conference</option>
                            <option value="workshop">UX Design Workshop</option>
                            <option value="networking">Professional Networking Mixer</option>
                        </select>
                    </div>
                    
                    <button type="submit" class="w-full gradient-bg text-white py-2 px-4 rounded-md hover:opacity-90 transition">
                        Register Now
                    </button>
                </form>
                
                <div id="success-message" class="hidden mt-4 text-center success-message"></div>
            </section>

            <!-- Attendance Dashboard -->
            <section id="dashboard-section" class="hidden bg-white rounded-lg shadow-md p-6">
                <h2 class="text-2xl font-bold text-gray-800 mb-6">Attendance Dashboard</h2>
                
                <div class="grid md:grid-cols-3 gap-6 mb-8">
                    <div class="bg-purple-50 p-4 rounded-lg">
                        <h3 class="font-medium text-purple-800">Confirmed Attendees</h3>
                        <p id="attendee-count" class="text-3xl font-bold mt-2">0</p>
                    </div>
                    <div class="bg-blue-50 p-4 rounded-lg">
                        <h3 class="font-medium text-blue-800">Current Session</h3>
                        <p id="user-event" class="text-xl font-semibold mt-2">Not registered</p>
                    </div>
                    <div class="bg-green-50 p-4 rounded-lg">
                        <h3 class="font-medium text-green-800">Recently Joined</h3>
                        <p id="last-attendee" class="text-xl font-semibold mt-2">-</p>
                    </div>
                </div>
                
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="font-medium text-gray-800 mb-3">All Attendees</h3>
                    <ul id="attendee-list" class="divide-y divide-gray-200">
                        <!-- Attendees will be listed here -->
                    </ul>
                </div>
            </section>
        </main>

        <script>
            // State management
            const EventEase = {
                currentUser: null,
                attendees: [],
                sessionEvents: {},
                
                init() {
                    // Load from localStorage if available
                    const savedState = localStorage.getItem('eventEaseState');
                    if (savedState) {
                        const state = JSON.parse(savedState);
                        this.attendees = state.attendees || [];
                        this.sessionEvents = state.sessionEvents || {};
                    }
                    
                    // Check if user is already logged in
                    const currentUser = sessionStorage.getItem('currentUser');
                    if (currentUser) {
                        this.currentUser = JSON.parse(currentUser);
                        this.showDashboard();
                    }
                    
                    // Set up event listeners
                    document.getElementById('registration-form').addEventListener('submit', this.handleRegistration.bind(this));
                    document.getElementById('logout-btn').addEventListener('click', this.handleLogout.bind(this));
                },
                
                handleRegistration(e) {
                    e.preventDefault();
                    
                    // Reset errors
                    document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
                    
                    // Get form data
                    const formData = new FormData(e.target);
                    const name = formData.get('name').trim();
                    const email = formData.get('email').trim();
                    const event = formData.get('event');
                    
                    // Validate inputs
                    let isValid = true;
                    
                    if (!name) {
                        document.getElementById('name-error').textContent = 'Please enter your name';
                        isValid = false;
                    }
                    
                    if (!email) {
                        document.getElementById('email-error').textContent = 'Please enter your email';
                        isValid = false;
                    } else if (!this.validateEmail(email)) {
                        document.getElementById('email-error').textContent = 'Please enter a valid email';
                        isValid = false;
                    }
                    
                    if (!isValid) return;
                    
                    // Check if email already registered for this event
                    const existingRegistration = this.attendees.find(attendee => 
                        attendee.email === email && attendee.event === event
                    );
                    
                    if (existingRegistration) {
                        document.getElementById('email-error').textContent = 'This email is already registered for the selected event';
                        return;
                    }
                    
                    // Create user object
                    const user = { name, email, event, timestamp: new Date().toISOString() };
                    
                    // Update state
                    this.currentUser = user;
                    this.attendees.push(user);
                    this.sessionEvents[email] = event;
                    
                    // Save to localStorage
                    this.saveState();
                    
                    // Update session storage
                    sessionStorage.setItem('currentUser', JSON.stringify(user));
                    
                    // Show success message
                    document.getElementById('success-message').textContent = `Registration successful! Welcome, ${name}!`;
                    document.getElementById('success-message').classList.remove('hidden');
                    
                    // Show dashboard
                    this.showDashboard();
                    
                    // Reset form after delay
                    setTimeout(() => {
                        e.target.reset();
                        document.getElementById('success-message').classList.add('hidden');
                    }, 3000);
                },
                
                showDashboard() {
                    // Hide registration form
                    document.getElementById('registration-section').classList.add('hidden');
                    
                    // Show dashboard and user info
                    document.getElementById('dashboard-section').classList.remove('hidden');
                    document.getElementById('user-info').classList.remove('hidden');
                    
                    // Update user display
                    document.getElementById('username-display').textContent = this.currentUser.name;
                    document.getElementById('user-event').textContent = 
                        this.getEventDisplayName(this.currentUser.event);
                    
                    // Update attendance data
                    this.updateAttendanceDisplay();
                },
                
                updateAttendanceDisplay() {
                    document.getElementById('attendee-count').textContent = this.attendees.length;
                    
                    const lastAttendee = this.attendees.length > 0 
                        ? this.attendees[this.attendees.length - 1]
                        : null;
                    
                    document.getElementById('last-attendee').textContent = 
                        lastAttendee ? `${lastAttendee.name} (${this.getEventDisplayName(lastAttendee.event)})` : '-';
                    
                    // Update attendee list
                    const attendeeList = document.getElementById('attendee-list');
                    attendeeList.innerHTML = '';
                    
                    // Group by event
                    const attendeesByEvent = {};
                    this.attendees.forEach(attendee => {
                        if (!attendeesByEvent[attendee.event]) {
                            attendeesByEvent[attendee.event] = [];
                        }
                        attendeesByEvent[attendee.event].push(attendee);
                    });
                    
                    // Generate list by event
                    Object.entries(attendeesByEvent).forEach(([event, attendees]) => {
                        const eventHeader = document.createElement('li');
                        eventHeader.className = 'py-3 font-medium';
                        eventHeader.textContent = `${this.getEventDisplayName(event)} (${attendees.length})`;
                        attendeeList.appendChild(eventHeader);
                        
                        attendees.forEach(attendee => {
                            const attendeeItem = document.createElement('li');
                            attendeeItem.className = 'py-2 flex justify-between items-center';
                            
                            const attendeeInfo = document.createElement('div');
                            attendeeInfo.innerHTML = `
                                <span class="font-medium">${attendee.name}</span>
                                <span class="text-sm text-gray-500 block">${attendee.email}</span>
                            `;
                            
                            const attendeeDate = document.createElement('div');
                            attendeeDate.className = 'text-sm text-gray-500';
                            attendeeDate.textContent = new Date(attendee.timestamp).toLocaleDateString();
                            
                            attendeeItem.appendChild(attendeeInfo);
                            attendeeItem.appendChild(attendeeDate);
                            attendeeList.appendChild(attendeeItem);
                        });
                    });
                },
                
                handleLogout() {
                    // Clear session
                    this.currentUser = null;
                    sessionStorage.removeItem('currentUser');
                    
                    // Hide dashboard and user info
                    document.getElementById('dashboard-section').classList.add('hidden');
                    document.getElementById('user-info').classList.add('hidden');
                    
                    // Show registration form
                    document.getElementById('registration-section').classList.remove('hidden');
                    
                    // Reset form
                    document.getElementById('registration-form').reset();
                },
                
                validateEmail(email) {
                    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    return re.test(email);
                },
                
                getEventDisplayName(eventKey) {
                    const eventNames = {
                        'conference': 'Tech Conference',
                        'workshop': 'UX Workshop',
                        'networking': 'Networking Mixer'
                    };
                    return eventNames[eventKey] || eventKey;
                },
                
                saveState() {
                    const state = {
                        attendees: this.attendees,
                        sessionEvents: this.sessionEvents
                    };
                    localStorage.setItem('eventEaseState', JSON.stringify(state));
                }
            };
            
            // Initialize the app
            document.addEventListener('DOMContentLoaded', () => {
                EventEase.init();
            });
        </script>
    </body>
    </html>

    ```

    🎨 **Generating images based on descriptions...**

    ✅ **Images generated successfully! Here's your updated content:**

    `event-ease.html`
    ```html
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>EventEase - Event Management</title>
        <script src="https://cdn.tailwindcss.com"></script>
        <style>
            .gradient-bg {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            }
            .form-input:focus {
                box-shadow: 0 0 0 3px rgba(118, 75, 162, 0.2);
            }
            .error-message {
                color: #ef4444;
                font-size: 0.875rem;
                margin-top: 0.25rem;
            }
            .success-message {
                color: #10b981;
                font-size: 0.875rem;
                margin-top: 0.25rem;
            }
        </style>
    </head>
    <body class="min-h-screen bg-gray-100">
        <header class="gradient-bg text-white shadow-lg">
            <div class="container mx-auto px-4 py-6 flex justify-between items-center">
                <div class="flex items-center space-x-2">
                    <img src="https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/8b5c53ce-20c6-4f7e-a73e-144e96e69d85.png" alt="EventEase logo - Modern calendar icon in white with purple gradient background" class="rounded-full">
                    <h1 class="text-2xl font-bold">EventEase</h1>
                </div>
                <div id="user-info" class="hidden">
                    <span class="font-medium">Welcome, </span>
                    <span id="username-display" class="font-bold"></span>
                    <button id="logout-btn" class="ml-4 px-3 py-1 bg-white text-purple-800 rounded hover:bg-gray-100 transition">Logout</button>
                </div>
            </div>
        </header>

        <main class="container mx-auto px-4 py-8">
            <!-- Registration Section -->
            <section id="registration-section" class="max-w-md mx-auto bg-white rounded-lg shadow-md p-6 mb-8">
                <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">Event Registration</h2>
                <img src="https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/251961fe-9c85-4e51-8a3b-fceb84107b76.png" alt="People attending a conference event with smiling faces and networking" class="w-full h-auto rounded-lg mb-6">
                
                <form id="registration-form" class="space-y-4">
                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-700">Full Name</label>
                        <input type="text" id="name" name="name" required 
                            class="mt-1 block w-full form-input rounded-md border-gray-300 shadow-sm">
                        <div id="name-error" class="error-message"></div>
                    </div>
                    
                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                        <input type="email" id="email" name="email" required 
                            class="mt-1 block w-full form-input rounded-md border-gray-300 shadow-sm">
                        <div id="email-error" class="error-message"></div>
                    </div>
                    
                    <div>
                        <label for="event" class="block text-sm font-medium text-gray-700">Select Event</label>
                        <select id="event" name="event" class="mt-1 block w-full form-input rounded-md border-gray-300 shadow-sm">
                            <option value="conference">Annual Tech Conference</option>
                            <option value="workshop">UX Design Workshop</option>
                            <option value="networking">Professional Networking Mixer</option>
                        </select>
                    </div>
                    
                    <button type="submit" class="w-full gradient-bg text-white py-2 px-4 rounded-md hover:opacity-90 transition">
                        Register Now
                    </button>
                </form>
                
                <div id="success-message" class="hidden mt-4 text-center success-message"></div>
            </section>

            <!-- Attendance Dashboard -->
            <section id="dashboard-section" class="hidden bg-white rounded-lg shadow-md p-6">
                <h2 class="text-2xl font-bold text-gray-800 mb-6">Attendance Dashboard</h2>
                
                <div class="grid md:grid-cols-3 gap-6 mb-8">
                    <div class="bg-purple-50 p-4 rounded-lg">
                        <h3 class="font-medium text-purple-800">Confirmed Attendees</h3>
                        <p id="attendee-count" class="text-3xl font-bold mt-2">0</p>
                    </div>
                    <div class="bg-blue-50 p-4 rounded-lg">
                        <h3 class="font-medium text-blue-800">Current Session</h3>
                        <p id="user-event" class="text-xl font-semibold mt-2">Not registered</p>
                    </div>
                    <div class="bg-green-50 p-4 rounded-lg">
                        <h3 class="font-medium text-green-800">Recently Joined</h3>
                        <p id="last-attendee" class="text-xl font-semibold mt-2">-</p>
                    </div>
                </div>
                
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="font-medium text-gray-800 mb-3">All Attendees</h3>
                    <ul id="attendee-list" class="divide-y divide-gray-200">
                        <!-- Attendees will be listed here -->
                    </ul>
                </div>
            </section>
        </main>

        <script>
            // State management
            const EventEase = {
                currentUser: null,
                attendees: [],
                sessionEvents: {},
                
                init() {
                    // Load from localStorage if available
                    const savedState = localStorage.getItem('eventEaseState');
                    if (savedState) {
                        const state = JSON.parse(savedState);
                        this.attendees = state.attendees || [];
                        this.sessionEvents = state.sessionEvents || {};
                    }
                    
                    // Check if user is already logged in
                    const currentUser = sessionStorage.getItem('currentUser');
                    if (currentUser) {
                        this.currentUser = JSON.parse(currentUser);
                        this.showDashboard();
                    }
                    
                    // Set up event listeners
                    document.getElementById('registration-form').addEventListener('submit', this.handleRegistration.bind(this));
                    document.getElementById('logout-btn').addEventListener('click', this.handleLogout.bind(this));
                },
                
                handleRegistration(e) {
                    e.preventDefault();
                    
                    // Reset errors
                    document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
                    
                    // Get form data
                    const formData = new FormData(e.target);
                    const name = formData.get('name').trim();
                    const email = formData.get('email').trim();
                    const event = formData.get('event');
                    
                    // Validate inputs
                    let isValid = true;
                    
                    if (!name) {
                        document.getElementById('name-error').textContent = 'Please enter your name';
                        isValid = false;
                    }
                    
                    if (!email) {
                        document.getElementById('email-error').textContent = 'Please enter your email';
                        isValid = false;
                    } else if (!this.validateEmail(email)) {
                        document.getElementById('email-error').textContent = 'Please enter a valid email';
                        isValid = false;
                    }
                    
                    if (!isValid) return;
                    
                    // Check if email already registered for this event
                    const existingRegistration = this.attendees.find(attendee => 
                        attendee.email === email && attendee.event === event
                    );
                    
                    if (existingRegistration) {
                        document.getElementById('email-error').textContent = 'This email is already registered for the selected event';
                        return;
                    }
                    
                    // Create user object
                    const user = { name, email, event, timestamp: new Date().toISOString() };
                    
                    // Update state
                    this.currentUser = user;
                    this.attendees.push(user);
                    this.sessionEvents[email] = event;
                    
                    // Save to localStorage
                    this.saveState();
                    
                    // Update session storage
                    sessionStorage.setItem('currentUser', JSON.stringify(user));
                    
                    // Show success message
                    document.getElementById('success-message').textContent = `Registration successful! Welcome, ${name}!`;
                    document.getElementById('success-message').classList.remove('hidden');
                    
                    // Show dashboard
                    this.showDashboard();
                    
                    // Reset form after delay
                    setTimeout(() => {
                        e.target.reset();
                        document.getElementById('success-message').classList.add('hidden');
                    }, 3000);
                },
                
                showDashboard() {
                    // Hide registration form
                    document.getElementById('registration-section').classList.add('hidden');
                    
                    // Show dashboard and user info
                    document.getElementById('dashboard-section').classList.remove('hidden');
                    document.getElementById('user-info').classList.remove('hidden');
                    
                    // Update user display
                    document.getElementById('username-display').textContent = this.currentUser.name;
                    document.getElementById('user-event').textContent = 
                        this.getEventDisplayName(this.currentUser.event);
                    
                    // Update attendance data
                    this.updateAttendanceDisplay();
                },
                
                updateAttendanceDisplay() {
                    document.getElementById('attendee-count').textContent = this.attendees.length;
                    
                    const lastAttendee = this.attendees.length > 0 
                        ? this.attendees[this.attendees.length - 1]
                        : null;
                    
                    document.getElementById('last-attendee').textContent = 
                        lastAttendee ? `${lastAttendee.name} (${this.getEventDisplayName(lastAttendee.event)})` : '-';
                    
                    // Update attendee list
                    const attendeeList = document.getElementById('attendee-list');
                    attendeeList.innerHTML = '';
                    
                    // Group by event
                    const attendeesByEvent = {};
                    this.attendees.forEach(attendee => {
                        if (!attendeesByEvent[attendee.event]) {
                            attendeesByEvent[attendee.event] = [];
                        }
                        attendeesByEvent[attendee.event].push(attendee);
                    });
                    
                    // Generate list by event
                    Object.entries(attendeesByEvent).forEach(([event, attendees]) => {
                        const eventHeader = document.createElement('li');
                        eventHeader.className = 'py-3 font-medium';
                        eventHeader.textContent = `${this.getEventDisplayName(event)} (${attendees.length})`;
                        attendeeList.appendChild(eventHeader);
                        
                        attendees.forEach(attendee => {
                            const attendeeItem = document.createElement('li');
                            attendeeItem.className = 'py-2 flex justify-between items-center';
                            
                            const attendeeInfo = document.createElement('div');
                            attendeeInfo.innerHTML = `
                                <span class="font-medium">${attendee.name}</span>
                                <span class="text-sm text-gray-500 block">${attendee.email}</span>
                            `;
                            
                            const attendeeDate = document.createElement('div');
                            attendeeDate.className = 'text-sm text-gray-500';
                            attendeeDate.textContent = new Date(attendee.timestamp).toLocaleDateString();
                            
                            attendeeItem.appendChild(attendeeInfo);
                            attendeeItem.appendChild(attendeeDate);
                            attendeeList.appendChild(attendeeItem);
                        });
                    });
                },
                
                handleLogout() {
                    // Clear session
                    this.currentUser = null;
                    sessionStorage.removeItem('currentUser');
                    
                    // Hide dashboard and user info
                    document.getElementById('dashboard-section').classList.add('hidden');
                    document.getElementById('user-info').classList.add('hidden');
                    
                    // Show registration form
                    document.getElementById('registration-section').classList.remove('hidden');
                    
                    // Reset form
                    document.getElementById('registration-form').reset();
                },
                
                validateEmail(email) {
                    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    return re.test(email);
                },
                
                getEventDisplayName(eventKey) {
                    const eventNames = {
                        'conference': 'Tech Conference',
                        'workshop': 'UX Workshop',
                        'networking': 'Networking Mixer'
                    };
                    return eventNames[eventKey] || eventKey;
                },
                
                saveState() {
                    const state = {
                        attendees: this.attendees,
                        sessionEvents: this.sessionEvents
                    };
                    localStorage.setItem('eventEaseState', JSON.stringify(state));
                }
            };
            
            // Initialize the app
            document.addEventListener('DOMContentLoaded', () => {
                EventEase.init();
            });
        </script>
    </body>
    </html>

@code {
    private void HandleValidSubmit()
    {
        UserSession.SetUser (registrationModel.Name);
    }
}